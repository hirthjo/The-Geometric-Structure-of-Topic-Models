* Helper functions for scaling experiments
** imports
:PROPERTIES:
:CUSTOM_ID: imports
:END:
#+BEGIN_SRC python
import pandas as pd
import numpy as np
#+END_SRC
** compute scales
:PROPERTIES:
:CUSTOM_ID: scaling
:END:
#+BEGIN_SRC python
def compute_context(df):
    mv_incidence = pd.DataFrame(df.topics.values.tolist())
    mv_incidence.index = df.title
    return mv_incidence

def scale_by_threshold(mv_context,delta):
    return mv_context.apply(lambda row: row.apply(lambda i: 1 if i>=delta else 0))

def author_context(df,author,delta):
    df_author = df[df.author == author]
    mv_context_author = compute_context(df_author)
    context_author = scale_by_threshold(mv_context_author,delta)
    return context_author

def venue_context(df,venue,delta):
    df_venue = df[df.venue == venue]
    mv_context_venue = compute_context(df_venue)
    context_venue = scale_by_threshold(mv_context_venue,delta)
    return context_venue
#+END_SRC
** load an prepare data
:PROPERTIES:
:CUSTOM_ID: data
:END:
*** Venue papers
#+BEGIN_SRC python
venue_papers = pd.read_csv("data/venue_paper_topics.csv",
                           delimiter=";", names =["year","venue","title","topics"])
venue_papers["topics"] = venue_papers["topics"].apply(lambda x: [float(t) for t in x[1:-1].split(",")])
venue_papers['venue'] = venue_papers['venue'].str.upper()
#+END_SRC
*** author papers
#+BEGIN_SRC python
author_papers = pd.read_csv("data/author_paper_topics.csv",
                            delimiter=";", names=["year","author","title","topics"])
author_papers["topics"] = author_papers["topics"].apply(lambda x: [float(t) for t in x[1:-1].split(",")])
author_papers['author'] = author_papers['author'].str.upper()
#+END_SRC

** value list to densities
:PROPERTIES:
:CUSTOM_ID: density
:END:
#+BEGIN_SRC python
# agglomerative for density
def agglomerative_values(values):
    values_srt = sorted(values)
    values_agg = [1 - i/len(values) for i in range(len(values))]
    agg_idx = [i for i in range(1,len(values)) if values_srt[i]>values_srt[i-1]]
    x_agg = [values_srt[i] for i in agg_idx]
    y_agg = [values_agg[i] for i in agg_idx]
    # There are some numeric issues at work here
    x_agg = x_agg[::500]
    y_agg = y_agg[::500]
    bad_idx = {i for i in range(1,len(x_agg)) if x_agg[i]<x_agg[i-1] or y_agg[i]>y_agg[i-1]}
    x_agg = [x_agg[i] for i in range(len(x_agg)) if i not in bad_idx]
    y_agg = [y_agg[i] for i in range(len(x_agg)) if i not in bad_idx]
    x_agg = x_agg[:len(y_agg)]
    
    return x_agg, y_agg
#+END_SRC
